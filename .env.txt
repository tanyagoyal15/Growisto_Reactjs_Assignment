        return (
            <form className="container" onSubmit={this.handleSubmit}>
                <Input
                    type={'email'}
                    title={'Email'}
                    name={'email'}
                    value={this.state.newUser.email}
                    placeholder={'Enter your email'}
                    handleChange={this.handleInput} 
                />
                {this.state.errors.email ? (
                    <div style={{fontSize: '12px' , color: 'red' }}>
                        {this.state.errors.email}
                    </div> 
                ) : null} 
                <Input 
                    type={'tel'}
                    title={'Mobile'}
                    name={'mobile_no'}
                    value={this.state.newUser.mobile}
                    placeholder={'Enter your Mobile no'}
                    handleChange={this.handleInput}
                />
                {this.state.errors.mobile_no ? (
                    <div style={{fontSize: '12px' , color: 'red' }}>
                        {this.state.errors.mobile_no}
                    </div>
                ) : null}
                <Button 
                    title={'Submit'}
                    action={this.handleSubmit}
                    // values={this.state.newUser}
                />
                <Button 
                    title={'Clear Form'}
                    action={this.handleClearForm}
                />
                {/* <button>Add new cat</button> */}
            </form>
        )












    render() {
        const { step } = this.state;
        const { email, mobile_no } = this.state;
        const values = { email, mobile_no }; 

        switch(step) {
            case 1 : 
                return (
                    <FormUserDetails
                        nextStep = {this.nextStep}
                        handleChange = {this.handleChange}
                        values = {values}
                    />
                )
                case 2 : return (
                    <UserData 
                        nextStep = {this.nextStep}
                        prevStep = {this.prevStep} 
                        values = {values} 
                    />
                )
                case 3 : return <h1>Form Submitted</h1>
        }
    }








































{ this.addAge = () => {
                            if(values.email.indexOf('gmail') > 0) {
                                console.log('age added');
                                return (
                                    <Input
                                        type={'number'}
                                        title={'Age'}
                                        name={'age'}
                                        value={values.age}
                                        placeholder={'Enter your age'}
                                        handleChange={this.props.handleChange}
                                    />
                                )
                            } else alert("You need to have gmail in your email to add age")
                        } 
                        }









        // display : 'flex',
        // flexDirection : 'row',
        // justifyContent : 'center',
        // alignItems : 'center',
        // width : 20